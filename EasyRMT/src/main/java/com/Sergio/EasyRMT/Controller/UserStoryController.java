/*
 * Copyright (c) $today.year.Sergio López Jiménez and Universidad de Valladolid
 *                             All rights reserved
 */

package com.Sergio.EasyRMT.Controller;

import com.Sergio.EasyRMT.Domain.*;
import com.Sergio.EasyRMT.Model.Group_user;
import com.Sergio.EasyRMT.Model.types.*;
import com.Sergio.EasyRMT.Service.*;
import javassist.bytecode.stackmap.TypeData;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.validation.Valid;
import java.security.Principal;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@RestController
public class UserStoryController {
    private static final Logger LOGGER = Logger.getLogger( TypeData.ClassName.class.getName() );
    private final String loggerMessage = "Unauthorized attempt to access: ";
    final String PATH_BASE = "/project/{projectId}/epic/{epicId}/";
    ProjectService projectService;
    EpicService epicService;
    UserStoryService userStoryService;
    DocumentService documentService;
    CommonMethods commonMethods;
    UserService userService;
    TraceabilityService traceabilityService;
    CommentService commentService;

    @Autowired
    public UserStoryController(ProjectService projectService, EpicService epicService, UserStoryService userStoryService,
                               DocumentService documentService, CommonMethods commonMethods, UserService userService,
                               TraceabilityService traceabilityService, CommentService commentService) {
        this.projectService = projectService;
        this.epicService = epicService;
        this.userStoryService = userStoryService;
        this.documentService = documentService;
        this.commonMethods = commonMethods;
        this.userService = userService;
        this.traceabilityService = traceabilityService;
        this.commentService = commentService;
    }

    /**
     * This rest controller receives a request to get an user stories list related with an epic
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} id
     * @param epicId {@link UserStoryDom} id
     * @param modelAndView autogenerated model and view
     * @return model and view with user stories list
     */
    @RequestMapping(value = PATH_BASE+"userstories", method = RequestMethod.GET)
    public ModelAndView getUserStoriesListView(@PathVariable int projectId, @PathVariable int epicId, ModelAndView modelAndView,
                                               Principal principal){
        ProjectDom project = projectService.getProject(projectId);
        UserDom user = userService.findUser(principal.getName());
        List<ProjectDom> projectDomList = commonMethods.getProjectsFromGroup(user);
        if (commonMethods.isAllowed(projectDomList, project)) {
            List<UserStoryDom> userStoryDomList = userStoryService.getUserStories(epicId);
            EpicDom epicDom = epicService.getEpic(epicId);
            boolean isPm = commonMethods.isPM(user, principal.getName());
            List<Group_user> group = project.getGroup().getUsers();
            modelAndView.setViewName("userStoriesDashboard");
            modelAndView.addObject("project", project);
            modelAndView.addObject("userStoriesList", userStoryDomList);
            modelAndView.addObject("projectList", projectDomList);
            modelAndView.addObject("epicId", epicDom.getIdEpic());
            modelAndView.addObject("epicName", epicDom.getName());
            modelAndView.addObject("user", principal.getName());
            modelAndView.addObject("group", group);
            modelAndView.addObject("isPM", isPm);
            return modelAndView;
        }
        LOGGER.log(Level.INFO, loggerMessage+"User "+principal.getName()+" has tried to get a list of user stories from project "
                +projectId);
        throw new AccessDeniedException("Not allowed");
    }

    /**
     * This rest controller receives a request to get an user stories list related with a project
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} id
     * @param modelAndView autogenerated model and view
     * @return model and view with user stories list
     */
    @RequestMapping(value ="/project/{projectId}/epics/userstories" , method = RequestMethod.GET)
    public ModelAndView getUserStoriesListView(@PathVariable int projectId, ModelAndView modelAndView, Principal principal){
        ProjectDom project = projectService.getProject(projectId);
        UserDom user = userService.findUser(principal.getName());
        List<ProjectDom> projectDomList = commonMethods.getProjectsFromGroup(user);
        if (commonMethods.isAllowed(projectDomList, project)) {
            List<UserStoryDom> userStoryDomList = userStoryService.getByProjectID(projectId);
            boolean isPm = commonMethods.isPM(user, principal.getName());
            List<Group_user> group = project.getGroup().getUsers();
            modelAndView.setViewName("userStoriesDashboardProject");
            modelAndView.addObject("project", project);
            modelAndView.addObject("userStoriesList", userStoryDomList);
            modelAndView.addObject("projectList", projectDomList);
            modelAndView.addObject("user", principal.getName());
            modelAndView.addObject("group", group);
            modelAndView.addObject("isPM", isPm);
            return modelAndView;
        }
        LOGGER.log(Level.INFO, loggerMessage+"User "+principal.getName()+" has tried to get a list of user stories from project "
                +projectId);
        throw new AccessDeniedException("Not allowed");
    }

    /**
     * This rest controller receives a request to get an userStory related with a project and an epic
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} project Id which owns the epic
     * @param epicId id of epid which is related with user story
     * @param userStoryId {@link UserStoryDom} UserStory id of epic requested
     * @param modelAndView autogenerated model and view
     * @return model and view with user story
     */
    @RequestMapping(value = PATH_BASE+"userstory/{userStoryId}", method = RequestMethod.GET)
    public ModelAndView getUserStoryView(@PathVariable int projectId, @PathVariable int epicId,
                                         @PathVariable int userStoryId, ModelAndView modelAndView, Principal principal){
        ProjectDom project = projectService.getProject(projectId);
        UserDom user = userService.findUser(principal.getName());
        List<ProjectDom> projectDomList = commonMethods.getProjectsFromGroup(user);
        if (commonMethods.isAllowed(projectDomList, project)) {
            EpicDom epicDom = epicService.getEpic(epicId);
            boolean isPm = commonMethods.isPM(user, principal.getName());
            List<Group_user> group = project.getGroup().getUsers();
            TraceDom traceability = traceabilityService.getTraceability(userStoryId);
            List<CommentDom> comments = commentService.getComments(userStoryId);
            modelAndView.setViewName("userStory");
            modelAndView.addObject("userStory", userStoryService.getUserStory(userStoryId));
            modelAndView.addObject("project", project);
            modelAndView.addObject("projectList", projectDomList);
            modelAndView.addObject("epicId", epicDom.getIdEpic());
            modelAndView.addObject("epicName", epicDom.getName());
            modelAndView.addObject("fileList", documentService.getFileList(projectId, userStoryId));
            modelAndView.addObject("user", principal.getName());
            modelAndView.addObject("group", group);
            modelAndView.addObject("isPM", isPm);
            modelAndView.addObject("traceability", traceability);
            modelAndView.addObject("traceObject", new TraceDom());
            modelAndView.addObject("reqTypes", project.getRequirementTypes());
            modelAndView.addObject("reqsNotTraced", traceabilityService.getNotTracedReqs(projectId,userStoryId));
            modelAndView.addObject("epicList", traceabilityService.getNotTracedEpics(projectId, userStoryId));
            modelAndView.addObject("userStoryList", traceabilityService.getNotTracedUserStories(projectId,userStoryId));
            modelAndView.addObject("comments", comments);
            return modelAndView;
        }
        LOGGER.log(Level.INFO, loggerMessage+"User "+principal.getName()+" has tried to obtain a user story from project "+projectId);
        throw new AccessDeniedException("Not allowed");
    }

    /**
     * This rest controller receives a request to get a page to create an userstory related with a project and an epic
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} project Id which owns the epic
     * @param epicId {@link EpicDom} epic id which will own the user story
     * @param modelAndView autogenerated model and view
     * @return model and view with page
     */
    @RequestMapping(value = PATH_BASE+"userstories/create", method = RequestMethod.GET)
    public ModelAndView getCreateUserStoryView(@PathVariable int projectId, @PathVariable int epicId,
                                               ModelAndView modelAndView, Principal principal){
        ProjectDom project = projectService.getProject(projectId);
        UserDom user = userService.findUser(principal.getName());
        List<ProjectDom> projectDomList = commonMethods.getProjectsFromGroup(user);
        if (commonMethods.isAllowed(projectDomList, project)) {
            EpicDom epicDom = epicService.getEpic(epicId);
            UserStoryDom userStoryDom = new UserStoryDom();
            boolean isPm = commonMethods.isPM(user, principal.getName());
            List<Group_user> group = project.getGroup().getUsers();
            modelAndView.setViewName("createUserStory");
            modelAndView.addObject("project", project);
            modelAndView.addObject("projectList", projectDomList);
            modelAndView.addObject("userStory", userStoryDom);
            modelAndView.addObject("epicId",epicDom.getIdEpic());
            modelAndView.addObject("epicName", epicDom.getName());
            modelAndView.addObject("priority", Priority.values());
            modelAndView.addObject("state", State.values());
            modelAndView.addObject("risk", Risk.values());
            modelAndView.addObject("complexity", Complexity.values());
            modelAndView.addObject("scope", Scope.values());
            modelAndView.addObject("user", principal.getName());
            modelAndView.addObject("group", group);
            modelAndView.addObject("isPM", isPm);
            return modelAndView;
        }
        LOGGER.log(Level.INFO, loggerMessage+"User "+principal.getName()+" has tried to create a user story in project "+projectId);
        throw new AccessDeniedException("Not allowed");
    }

    /**
     * This method gets the request of an user story creation.
     * Then calls {@link UserStoryService}to manage it.
     * When the information is returned this method generate a new ModelAndView with a project view and the persisted
     * {@link UserStoryDom} as object.
     * @param projectId {@link ProjectDom} id object
     * @param epicId {@link EpicDom} id object
     * @param userStoryDom {@link UserStoryDom} information to be persisted
     * @return ModelAndView with a project view and the persisted
     *       {@link UserStoryDom} as object.
     */
    @RequestMapping(value = PATH_BASE+"userstory/create", method = RequestMethod.POST)
    public ModelAndView createUserStory(@PathVariable int projectId, @PathVariable int epicId,Principal principal,
                                        @ModelAttribute @Valid UserStoryDom userStoryDom, BindingResult result){
        ProjectDom project = projectService.getProject(projectId);
        UserDom user = userService.findUser(principal.getName());
        List<ProjectDom> projectDomList = commonMethods.getProjectsFromGroup(user);
        userStoryDom.setAuthorId(user.getUserId());
        if (commonMethods.isAllowed(projectDomList, project)) {
            if (result.hasErrors()) {
                boolean isPm = commonMethods.isPM(user, principal.getName());
                List<Group_user> group = project.getGroup().getUsers();
                EpicDom epicDom = epicService.getEpic(epicId);
                ModelAndView modelAndView = new ModelAndView();
                modelAndView.setViewName("userStory");
                modelAndView.addObject("userStory", userStoryDom);
                modelAndView.addObject("project", project);
                modelAndView.addObject("epicId", epicDom.getIdEpic());
                modelAndView.addObject("epicName", epicDom.getName());
                modelAndView.addObject("projectList", projectDomList);
                modelAndView.addObject("user", principal.getName());
                modelAndView.addObject("group", group);
                modelAndView.addObject("isPM", isPm);
                return modelAndView;
            }
            UserStoryDom persistedUserStory = userStoryService.create(userStoryDom, epicId, projectId);
            String path = "/project/"+projectId+"/epic/"+epicId+"/userstory/"+persistedUserStory.getIdUserStory();
            return new ModelAndView("redirect:"+path);
        }
        LOGGER.log(Level.INFO, loggerMessage+"User "+principal.getName()+" has tried to create a user story in project "+projectId);
        throw new AccessDeniedException("Not allowed");
    }

    /**
     * This rest controller receives a request to get a page to update an user story related with a project and an epic
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} project Id which owns the epic
     * @param epicId {@link EpicDom} epic Id which owns the user story
     * @param userStoryId {@link UserStoryDom} id of userStory to be updated
     * @param modelAndView autogenerated model and view
     * @return model and view with page
     */
    @RequestMapping(value = PATH_BASE+"userstory/update/{userStoryId}", method = RequestMethod.GET)
    public ModelAndView getUpdateUserStoryView(@PathVariable int projectId,@PathVariable int epicId,
                                          @PathVariable int userStoryId, ModelAndView modelAndView, Principal principal){
        ProjectDom project = projectService.getProject(projectId);
        UserDom user = userService.findUser(principal.getName());
        List<ProjectDom> projectDomList = commonMethods.getProjectsFromGroup(user);
        if (commonMethods.isAllowed(projectDomList, project)) {
            EpicDom epicDom = epicService.getEpic(epicId);
            UserStoryDom userStoryDom = userStoryService.getUserStory(userStoryId);
            boolean isPm = commonMethods.isPM(user, principal.getName());
            List<Group_user> group = project.getGroup().getUsers();
            modelAndView.setViewName("updateUserStory");
            modelAndView.addObject("project", project);
            modelAndView.addObject("projectList", projectDomList);
            modelAndView.addObject("userStory", userStoryDom);
            modelAndView.addObject("epicId", epicDom.getIdEpic());
            modelAndView.addObject("epicName", epicDom.getName());
            modelAndView.addObject("priority", Priority.values());
            modelAndView.addObject("state", State.values());
            modelAndView.addObject("risk", Risk.values());
            modelAndView.addObject("complexity", Complexity.values());
            modelAndView.addObject("scope", Scope.values());
            modelAndView.addObject("user", principal.getName());
            modelAndView.addObject("group", group);
            modelAndView.addObject("isPM", isPm);
            return modelAndView;
        }
        LOGGER.log(Level.INFO, loggerMessage+"User "+principal.getName()+" has tried to update a user story from project "+projectId);
        throw new AccessDeniedException("Not allowed");
    }

    /**
     * This method gets the request of an userStory update.
     * Then calls {@link UserStoryService}to manage it.
     * When the information is returned this method generate a new ModelAndView with a project view and the persisted
     * {@link UserStoryDom} as object.
     * @param projectId {@link ProjectDom} id object
     * @param epicId {@link EpicDom} epic Id
     * @param userStoryId {@link UserStoryDom} userstory Id to be updated
     * @param userStoryDom {@link UserStoryDom} information to be persisted
     * @return ModelAndView with a project view and the persisted
     *       {@link UserStoryDom} as object.
     */
    @RequestMapping(value = PATH_BASE+"userstory/{userStoryId}", method = RequestMethod.POST)
    public ModelAndView updateUserStory(@PathVariable int projectId, @PathVariable int epicId, @PathVariable int userStoryId,
                                        @ModelAttribute @Valid UserStoryDom userStoryDom, BindingResult result,
                                        Principal principal) {
        ProjectDom project = projectService.getProject(projectId);
        UserDom user = userService.findUser(principal.getName());
        List<ProjectDom> projectDomList = commonMethods.getProjectsFromGroup(user);
        if (commonMethods.isAllowed(projectDomList, project)) {
            if (result.hasErrors()) {
                EpicDom epic = epicService.getEpic(epicId);
                boolean isPm = commonMethods.isPM(user, principal.getName());
                List<Group_user> group = project.getGroup().getUsers();
                ModelAndView mav = new ModelAndView();
                mav.setViewName("userStory");
                mav.addObject("userStory", userStoryDom);
                mav.addObject("project", project);
                mav.addObject("projectList", projectDomList);
                mav.addObject("epicId", epic.getIdEpic());
                mav.addObject("epicName", epic.getName());
                mav.addObject("user", principal.getName());
                return mav;
            }
            UserStoryDom persistedUserStory = userStoryService.update(projectId, epicId, userStoryId, userStoryDom);
            String path = "/project/" + projectId + "/epic/" + epicId + "/userstory/" + persistedUserStory.getIdUserStory();
            return new ModelAndView("redirect:" + path);
        }
        LOGGER.log(Level.INFO, loggerMessage + "User " + principal.getName() + " has tried to update a user story in project " + projectId);
        throw new AccessDeniedException("Not allowed");
    }

    /**
     * Delete epic receives an userStory id as path variable and uses it to call {@link UserStoryService} delete method.
     * this method is called via JavaScript so returns a HttpStatus ok if deletion has been done and a HttpStatus
     * Internal Server Error if not.
     * @param projectId project id
     * @param epicId epic id
     * @param userStoryId userStory id to be deleted
     * @return HttpStatus.ok if correct. HttpStatus.INTERNAL_SERVER_ERROR if not correct.
     */
    @RequestMapping(value = PATH_BASE+"userstory/{userStoryId}", method = RequestMethod.DELETE)
    public ResponseEntity deleteUserStory(@PathVariable int projectId, @PathVariable int epicId, @PathVariable int userStoryId,
                                          Principal principal){
        ProjectDom project = projectService.getProject(projectId);
        UserDom user = userService.findUser(principal.getName());
        List<ProjectDom> projectDomList = commonMethods.getProjectsFromGroup(user);
        if (commonMethods.isAllowed(projectDomList, project)) {
            boolean deleted = userStoryService.deleteUserStory(userStoryId);
            if (deleted) {
                return ResponseEntity.status(HttpStatus.OK).body("");
            }
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("");
        }
        LOGGER.log(Level.INFO, loggerMessage+"User "+principal.getName()+" has tried to delete a user story from project "+projectId);
        throw new AccessDeniedException("Not allowed");

    }
}
