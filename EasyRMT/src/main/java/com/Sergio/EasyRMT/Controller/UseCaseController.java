/*
 * Copyright (c) $today.year.Sergio López Jiménez and Universidad de Valladolid
 *                             All rights reserved
 */

package com.Sergio.EasyRMT.Controller;

import com.Sergio.EasyRMT.Domain.EpicDom;
import com.Sergio.EasyRMT.Domain.FeatureDom;
import com.Sergio.EasyRMT.Domain.ProjectDom;
import com.Sergio.EasyRMT.Domain.UseCaseDom;
import com.Sergio.EasyRMT.Model.types.*;
import com.Sergio.EasyRMT.Service.FeatureService;
import com.Sergio.EasyRMT.Service.ProjectService;
import com.Sergio.EasyRMT.Service.UseCaseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.validation.Valid;
import java.util.List;

@RestController
public class UseCaseController {
    final String PATH_BASE = "/project/{projectId}/feature/{featureId}/";
    ProjectService projectService;
    FeatureService featureService;
    UseCaseService useCaseService;

    @Autowired
    public UseCaseController(ProjectService projectService, FeatureService featureService, UseCaseService useCaseService) {
        this.projectService = projectService;
        this.featureService = featureService;
        this.useCaseService = useCaseService;
    }

    /**
     * This rest controller receives a request to get an use cases list related with a feature
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} id
     * @param featureId {@link FeatureDom} id
     * @param mav autogenerated model and view
     * @return model and view with use cases list
     */
    @RequestMapping(value = PATH_BASE+"usecases", method = RequestMethod.GET)
    public ModelAndView getUserCasesListView(@PathVariable int projectId, @PathVariable int featureId, ModelAndView mav){
        List<ProjectDom> projectDomList = projectService.getProjects();
        List<UseCaseDom> useCaseDomList = useCaseService.getUseCases(featureId);
        ProjectDom project = projectService.getProject(projectId);
        FeatureDom featureDom = featureService.getFeature(featureId);
        mav.setViewName("useCasesDashboard");
        mav.addObject("project", project);
        mav.addObject("useCasesList", useCaseDomList);
        mav.addObject("projectList", projectDomList);
        mav.addObject("featureId",featureDom.getIdFeature());
        mav.addObject("featureName", featureDom.getName());
        return mav;
    }

    /**
     * This rest controller receives a request to get an use cases list related with a project
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} id
     * @param mav autogenerated model and view
     * @return model and view with user stories list
     */
    @RequestMapping(value ="/project/{projectId}/features/usecases" , method = RequestMethod.GET)
    public ModelAndView getUserCasesListView(@PathVariable int projectId, ModelAndView mav){
        List<ProjectDom> projectDomList = projectService.getProjects();
        List<UseCaseDom> useCaseDomList = useCaseService.getByProjectID(projectId);
        ProjectDom project = projectService.getProject(projectId);
        mav.setViewName("useCasesDashboardProject");
        mav.addObject("project", project);
        mav.addObject("useCasesList", useCaseDomList);
        mav.addObject("projectList", projectDomList);
        return mav;
    }

    /**
     * This rest controller receives a request to get an useCase related with a project and a feature
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} project Id which owns the epic
     * @param featureId id of feature which is related with use case
     * @param useCaseId {@link UseCaseDom} UseCase id of useCase requested
     * @param mav autogenerated model and view
     * @return model and view with user story
     */
    @RequestMapping(value = PATH_BASE+"usecase/{useCaseId}", method = RequestMethod.GET)
    public ModelAndView getUseCaseView(@PathVariable int projectId, @PathVariable int featureId,
                                         @PathVariable int useCaseId, ModelAndView mav){
        List<ProjectDom> projectDomList = projectService.getProjects();
        ProjectDom project = projectService.getProject(projectId);
        FeatureDom featureDom = featureService.getFeature(featureId);
        mav.setViewName("useCase");
        mav.addObject("useCase", useCaseService.getUseCase(useCaseId));
        mav.addObject("project", project);
        mav.addObject("projectList", projectDomList);
        mav.addObject("featureId",featureDom.getIdFeature());
        mav.addObject("featureName", featureDom.getName());
        return mav;
    }

    /**
     * This rest controller receives a request to get a page to create an use case related with a project and a feature
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} project Id which owns the feature
     * @param featureId {@link EpicDom} feature id which will own the use case
     * @param mav autogenerated model and view
     * @return model and view with page
     */
    @RequestMapping(value = PATH_BASE+"usecases/create", method = RequestMethod.GET)
    public ModelAndView getCreateUseCaseView(@PathVariable int projectId, @PathVariable int featureId,
                                               ModelAndView mav){
        List<ProjectDom> projectDomList = projectService.getProjects();
        ProjectDom project = projectService.getProject(projectId);
        FeatureDom featureDom = featureService.getFeature(featureId);
        UseCaseDom useCaseDom = new UseCaseDom();
        mav.setViewName("createUseCase");
        mav.addObject("project", project);
        mav.addObject("projectList", projectDomList);
        mav.addObject("useCase", useCaseDom);
        mav.addObject("featureId",featureDom.getIdFeature());
        mav.addObject("featureName", featureDom.getName());
        mav.addObject("priority", Priority.values());
        mav.addObject("state", State.values());
        mav.addObject("risk", Risk.values());
        mav.addObject("complexity", Complexity.values());
        mav.addObject("scope", Scope.values());
        return mav;
    }

    /**
     * This method gets the request of an use case creation.
     * Then calls {@link UseCaseService}to manage it.
     * When the information is returned this method generate a new ModelAndView with a project view and the persisted
     * {@link UseCaseDom} as object.
     * @param projectId {@link ProjectDom} id object
     * @param featureId {@link FeatureDom} id object
     * @param useCaseDom {@link UseCaseDom} information to be persisted
     * @return ModelAndView with a project view and the persisted
     *       {@link UseCaseDom} as object.
     */
    @RequestMapping(value = PATH_BASE+"usecase/create", method = RequestMethod.POST)
    public ModelAndView createUseCase(@PathVariable int projectId, @PathVariable int featureId,
                                   @ModelAttribute @Valid UseCaseDom useCaseDom){
        List<ProjectDom> projectDomList = projectService.getProjects();
        ProjectDom project = projectService.getProject(projectId);
        UseCaseDom persistedUseCase = useCaseService.create(useCaseDom, featureId, projectId);
        FeatureDom featureDom = featureService.getFeature(featureId);
        ModelAndView mav = new ModelAndView();
        mav.setViewName("useCase");
        mav.addObject("useCase", persistedUseCase);
        mav.addObject("project", project);
        mav.addObject("featureId",featureDom.getIdFeature());
        mav.addObject("featureName", featureDom.getName());
        mav.addObject("projectList", projectDomList);
        return mav;
    }

    /**
     * This rest controller receives a request to get a page to update a use case related with a project and a feature
     * Then creates the model and view and returns it.
     * @param projectId {@link ProjectDom} project Id which owns the feature
     * @param featureId {@link FeatureDom} feature Id which owns the use case
     * @param useCaseId {@link UseCaseDom} id of useCase to be updated
     * @param mav autogenerated model and view
     * @return model and view with page
     */
    @RequestMapping(value = PATH_BASE+"usecase/update/{useCaseId}", method = RequestMethod.GET)
    public ModelAndView getUpdateUseCaseView(@PathVariable int projectId,@PathVariable int featureId,
                                          @PathVariable int useCaseId, ModelAndView mav){
        List<ProjectDom> projectDomList = projectService.getProjects();
        ProjectDom project = projectService.getProject(projectId);
        FeatureDom featureDom = featureService.getFeature(featureId);
        UseCaseDom useCaseDom = useCaseService.getUseCase(useCaseId);
        mav.setViewName("updateUseCase");
        mav.addObject("project", project);
        mav.addObject("projectList", projectDomList);
        mav.addObject("useCase", useCaseDom);
        mav.addObject("featureId",featureDom.getIdFeature());
        mav.addObject("featureName", featureDom.getName());
        mav.addObject("priority", Priority.values());
        mav.addObject("state", State.values());
        mav.addObject("risk", Risk.values());
        mav.addObject("complexity", Complexity.values());
        mav.addObject("scope", Scope.values());
        return mav;
    }

    /**
     * This method gets the request of an useCase update.
     * Then calls {@link UseCaseService}to manage it.
     * When the information is returned this method generate a new ModelAndView with a project view and the persisted
     * {@link UseCaseDom} as object.
     * @param projectId {@link ProjectDom} id object
     * @param featureId {@link FeatureDom} feature Id
     * @param useCaseId {@link UseCaseDom} use case Id to be updated
     * @param useCaseDom {@link UseCaseDom} information to be persisted
     * @return ModelAndView with a project view and the persisted
     *       {@link UseCaseDom} as object.
     */
    @RequestMapping(value = PATH_BASE+"usecase/{useCaseId}", method = RequestMethod.POST)
    public ModelAndView updateUseCase(@PathVariable int projectId, @PathVariable int featureId,
                                        @PathVariable int useCaseId, @ModelAttribute @Valid UseCaseDom useCaseDom){
        List<ProjectDom> projectDomList = projectService.getProjects();
        ProjectDom project = projectService.getProject(projectId);
        UseCaseDom persistedUseCase = useCaseService.update(projectId,featureId,useCaseId,useCaseDom);
        FeatureDom feature = featureService.getFeature(featureId);
        ModelAndView mav = new ModelAndView();
        mav.setViewName("useCase");
        mav.addObject("useCase", persistedUseCase);
        mav.addObject("project", project);
        mav.addObject("projectList", projectDomList);
        mav.addObject("featureId",feature.getIdFeature());
        mav.addObject("featureName", feature.getName());
        return mav;
    }

    /**
     * Delete epic receives an use case id as path variable and uses it to call {@link UseCaseService} delete method.
     * this method is called via JavaScript so returns a HttpStatus ok if deletion has been done and a HttpStatus
     * Internal Server Error if not.
     * @param projectId project id
     * @param featureId feature id
     * @param useCaseId useCase id to be deleted
     * @return HttpStatus.ok if correct. HttpStatus.INTERNAL_SERVER_ERROR if not correct.
     */
    @RequestMapping(value = PATH_BASE+"usecase/{useCaseId}", method = RequestMethod.DELETE)
    public ResponseEntity deleteUseCase(@PathVariable int projectId, @PathVariable int featureId,
                                     @PathVariable int useCaseId){
        boolean deleted = useCaseService.deleteUseCase(useCaseId);
        if(deleted){
            return ResponseEntity.status(HttpStatus.OK).body("");
        }
        else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("");
        }
    }
}
